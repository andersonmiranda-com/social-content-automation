# Automation Project Rules

This document defines the rules and conventions to follow to maintain consistency, quality, and maintainability of the code in this project.

---

### 1. Code Style and Linting

- **PEP 8:** All Python code must strictly adhere to the [PEP 8](https://www.python.org/dev/peps/pep-0008/) style guides.
- **Formatting:** Using a code formatter like `black` or `autopep8` is recommended to ensure consistency.
- **Imports:** Imports should be ordered following the standard: first Python standard libraries, then third-party libraries, and finally local project imports.

### 2. Secrets and Configuration Management

- **No Hardcoding Secrets:** Under no circumstances should API keys, tokens, passwords, or other sensitive data be written directly into the code.
- **Use of `.env`:** All secrets must be stored in the `.env` file. This file must **never** be included in version control (ensure it is in `.gitignore`).
- **Variable Loading:** Use a library like `python-dotenv` to load these variables into the application's environment.

### 3. Project Structure

- **`flows/`**: Contains the orchestration logic. Each file represents a complete workflow (e.g., `generate_instagram_post.py`). These files import and use the `modules` and `utils`.
- **`modules/`**: Contains connectors to external services (APIs, databases, etc.). Each module should encapsulate all communication logic with a specific service (e.g., `linkedin_api.py`, `google_sheets.py`).
- **`utils/`**: Contains cross-cutting utility code that can be used anywhere in the project, such as logging configurations, helpers, or schedulers.
- **`main.py`**: Is the main entry point. Its responsibility is to start the flows, either directly or through a scheduler. It should be simple and delegate logic to the flows.

### 4. Dependency Management

- **`Pipfile` and `Pipfile.lock`**: All project dependencies must be managed using `pipenv`. The `Pipfile` will list the direct dependencies, and `Pipfile.lock` will ensure deterministic builds by locking a complete set of versioned dependencies.
- **Virtual Environment:** `pipenv` automatically creates and manages a virtual environment for the project. All development should occur within this managed environment (`pipenv shell`).
- **Adding Dependencies:** Use `pipenv install <package>` to add a new production dependency and `pipenv install --dev <package>` for a development-only dependency.

### 5. Version Control (Git)

- **Commit Messages:** Commit messages must be clear, concise, and follow the [Conventional Commits](https://www.conventionalcommits.org/) format.
  - **Examples:**
    - `feat: add image upload functionality to cloudinary module`
    - `fix: handle rate limiting error in instagram API`
    - `docs: update README with setup instructions`
    - `refactor: simplify logic in post generation flow`
- **Branches:** Use branches to develop new features or fix bugs. Do not push directly to the `main` branch.

### 6. Documentation

- **`README.md`**: Must contain, at a minimum:
  - A project description.
  - Clear installation instructions (e.g., clone repo, run `pipenv install --dev` to install all dependencies).
  - How to configure the `.env` file.
  - Instructions on how to run the main flows.
- **Docstrings:** All public functions and classes must have `docstrings` explaining their purpose, arguments, and what they return.
