---
alwaysApply: true
---

## 💾 Dependency and Environment

- Use `pipenv` for dependency management (`Pipfile`, `Pipfile.lock`).
- Never include `.env` in the repository. Use `.env.example`.
- Use `python-dotenv` or `pydantic` to validate and load environment variables.

---

## 🧪 Testing

- Every chain and pipeline must have at least one unit test (`tests/`).
- Use `pytest` + `mypy` + `black` + `isort` as base tools.
- It is recommended to configure GitHub Actions to run tests and linters automatically.

---

## 🧠 Code Style

- Follow PEP8 + `black`.
- Import in the order: stdlib → third-party → local.
- Use `type hints` and docstrings.
- Every Python file must have a module docstring.
- Use `logger` for all screen outputs instead of `print`.

---

## 🔁 Version Control

- Follow Conventional Commits.
- Use branch types:
  - `feat/`, `fix/`, `refactor/`, `docs/`
- Avoid direct commits to `main`.

---

## 🔥 Final Call

Think of each block as a Lego piece: simple, reusable, and without unnecessary couplings.

- **Docstrings:** All public functions and classes must have `docstrings` explaining their purpose, arguments, and what they return.
